{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["URL","App","useState","data","setData","loading","setLoading","inputValue","setInputValue","useEffect","axios","get","then","res","className","type","placeholder","onChange","evt","target","value","onClick","test","alert","xmlns","width","height","fill","stroke","strokeWidth","d","ip","location","city","country","postalCode","timezone","isp","MapContainer","center","lat","lng","zoom","scrollWheelZoom","zoomControl","TileLayer","attribution","url","Marker","position","Popup","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAMMA,EAAO,qFAqGEC,MAlGf,WAEE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA6BF,oBAAS,GAAtC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAwCA,OAtCDC,qBAAU,WACTC,IACAC,IAZY,+FAaXC,MAAK,SAAAC,GACJT,EAAQS,EAAIV,MACZG,GAAW,QAGX,IA8BCD,EACM,4CAGP,gCACA,iCACE,sBAAKS,UAAY,YAAjB,UACE,oDACA,sBAAKA,UAAY,YAAjB,UACE,uBACAC,KAAO,OACPD,UAAY,QACZE,YAAc,qCACdC,SAAY,SAAAC,GAAG,OAAIV,EAAcU,EAAIC,OAAOC,UAC5C,wBAAQN,UAAW,eAAeO,QA1CzB,WACX,mKAAmKC,KAAKf,IAA4B,KAAdA,GACxLD,GAAW,GACXI,IACDC,IAAIX,EAAM,aAAcO,GACxBK,MAAK,SAAAC,GACJT,EAAQS,EAAIV,MACZG,GAAW,GACXE,EAAc,QAIT,gEAAgEc,KAAKf,IAA6B,KAAdA,GAC3FD,GAAW,GACTI,IACDC,IAAIX,EAAM,UAAWO,GACrBK,MAAK,SAAAC,GACJT,EAAQS,EAAIV,MACZG,GAAW,GACXE,EAAc,SAIhBA,EAAc,IACde,MAAM,wCAkBA,SACE,qBAAKC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAA1D,SAA+D,sBAAMC,KAAK,OAAOC,OAAO,OAAOC,YAAY,IAAIC,EAAE,wBAIrH,sBAAKhB,UAAY,QAAjB,UACE,gCACE,4CACA,+BAAOX,EAAK4B,QAEd,gCACE,0CACA,yCAAU5B,EAAK6B,SAASC,KAAxB,YAAgC9B,EAAK6B,SAASE,QAA9C,YAAyD/B,EAAK6B,SAASG,iBAEzE,gCACE,0CACA,wCAAWhC,EAAK6B,SAASI,eAE3B,gCACE,qCACA,+BAAOjC,EAAKkC,iBAKpB,eAACC,EAAA,EAAD,CAAcC,OAAQ,CAACpC,EAAK6B,SAASQ,IAAIrC,EAAK6B,SAASS,KAAOC,KAAM,GAAIC,iBAAiB,EAAMC,aAAe,EAA9G,UACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAACC,EAAA,EAAD,CAAQC,SAAU,CAAC9C,EAAK6B,SAASQ,IAAIrC,EAAK6B,SAASS,KAAnD,SACE,cAACS,EAAA,EAAD,UACG/C,EAAK4B,cCvFDoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cb56aaf2.chunk.js","sourcesContent":["import './App.css'\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\n\nconst MyURL = \"https://geo.ipify.org/api/v2/country,city?apiKey=at_nSIqsffl0QJMdpOL8fMmHbdiHAFkW&ipAddress\"\nconst URL =  \"https://geo.ipify.org/api/v2/country,city?apiKey=at_nSIqsffl0QJMdpOL8fMmHbdiHAFkW&\"\n\n\nfunction App() {\n\n  const [data, setData] = useState({})\n  const [loading,setLoading] = useState(true)\n  const [inputValue, setInputValue] = useState('')\n\n useEffect(() =>{\n  axios\n .get(MyURL)\n  .then(res => {\n    setData(res.data)\n    setLoading(false)\n  })\n\n  },[])\n \n  const searchIp = () =>{\n    if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(inputValue)&& inputValue !=='') {  \n      setLoading(true)\n      axios\n    .get(URL + 'ipAddress=' +inputValue)\n    .then(res =>{\n      setData(res.data)\n      setLoading(false)\n      setInputValue('')\n    })\n    } \n    \n  else if (/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\\.[a-zA-Z]{2,})+$/.test(inputValue) && inputValue !==''){\n    setLoading(true)\n      axios\n    .get(URL + 'domain=' +inputValue)\n    .then(res =>{\n      setData(res.data)\n      setLoading(false)\n      setInputValue('')\n    })\n  }\n  else{\n    setInputValue('')\n    alert('Enter a valid IP address or Domain')\n    \n  }\n}\n  if(loading){\n    return <p>Loading ...</p>\n  }\n  return (\n    <div>\n    <header>\n      <div className = 'container'>\n        <h1>IP Address Tracker</h1>\n        <div className = 'input-box'>\n          <input \n          type = 'text' \n          className = 'input' \n          placeholder = 'Search for an IP address or domain'\n          onChange = {evt => setInputValue(evt.target.value)}/>\n          <button className ='input-button' onClick = {searchIp}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"11\" height=\"14\"><path fill=\"none\" stroke=\"#FFF\" strokeWidth=\"3\" d=\"M2 1l6 6-6 6\"/>\n            </svg>\n          </button>\n        </div>\n        <div className = 'infos'>\n          <div>\n            <h2>IP ADDRESS</h2>\n            <span>{data.ip}</span>\n          </div>\n          <div>\n            <h2>LOCATION</h2>\n            <span>{`${data.location.city},${data.location.country} ${data.location.postalCode}`}</span>\n          </div>\n          <div>\n            <h2>TIMEZONE</h2>\n            <span>UTC {data.location.timezone}</span>\n          </div>\n          <div>\n            <h2>ISP</h2>\n            <span>{data.isp}</span>\n          </div>\n        </div>\n      </div>\n    </header>\n    <MapContainer center={[data.location.lat,data.location.lng ]} zoom={13} scrollWheelZoom={true} zoomControl = {false}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <Marker position={[data.location.lat,data.location.lng ]}>\n        <Popup>\n          {data.ip}\n        </Popup>\n      </Marker>\n    </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}